PROBLEM STATEMENT:

Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Example 2:

Input: nums = [1]
Output: 1
Example 3:

Input: nums = [5,4,-1,7,8]
Output: 23
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104

                    SOLUTION:
                    
class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        max_sum=-99999
        currentsum=0
        c=0
        for i in nums:
            if i<0:
                c+=1
            if(c==len(nums)):
                return max(nums)
        if len(nums)==1:
            return nums[0]                 
        for i in range(0,len(nums)):
            currentsum+=nums[i]
            if currentsum<0:
                currentsum=0
            if currentsum>max_sum:
                max_sum=currentsum
        return max_sum
